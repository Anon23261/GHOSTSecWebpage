import os
import yara
import pefile
import magic
import hashlib
import json
from datetime import datetime
from celery import shared_task
from django.conf import settings
from .models import MalwareSample, AnalysisReport, YaraRule

@shared_task
def analyze_malware_sample(sample_id):
    """
    Analyze a malware sample using various techniques.
    """
    try:
        sample = MalwareSample.objects.get(id=sample_id)
        file_path = sample.file.path
        
        # Initialize analysis report
        report = AnalysisReport.objects.create(
            sample=sample,
            status='processing'
        )
        
        results = {
            'static_analysis': perform_static_analysis(file_path),
            'yara_analysis': perform_yara_analysis(file_path),
            'pe_analysis': perform_pe_analysis(file_path) if is_pe_file(file_path) else None,
        }
        
        # Update report with results
        report.results = json.dumps(results, indent=2)
        report.status = 'completed'
        report.completed_at = datetime.now()
        report.save()
        
        return True
        
    except Exception as e:
        if report:
            report.status = 'failed'
            report.error_message = str(e)
            report.save()
        return False

def perform_static_analysis(file_path):
    """
    Perform basic static analysis on the file.
    """
    results = {}
    
    # File type detection
    results['file_type'] = magic.from_file(file_path)
    results['mime_type'] = magic.from_file(file_path, mime=True)
    
    # File hashes
    with open(file_path, 'rb') as f:
        content = f.read()
        results['md5'] = hashlib.md5(content).hexdigest()
        results['sha1'] = hashlib.sha1(content).hexdigest()
        results['sha256'] = hashlib.sha256(content).hexdigest()
    
    # File size
    results['size'] = os.path.getsize(file_path)
    
    return results

def perform_yara_analysis(file_path):
    """
    Scan the file with YARA rules.
    """
    results = []
    rules_path = settings.YARA_RULES_PATH
    
    # Compile all .yar files in the rules directory
    for rule_file in os.listdir(rules_path):
        if rule_file.endswith('.yar'):
            try:
                rule_path = os.path.join(rules_path, rule_file)
                rules = yara.compile(rule_path)
                matches = rules.match(file_path)
                
                if matches:
                    for match in matches:
                        results.append({
                            'rule_name': match.rule,
                            'tags': match.tags,
                            'meta': match.meta,
                            'strings': [str(s) for s in match.strings]
                        })
            except Exception as e:
                results.append({
                    'error': f'Error in rule file {rule_file}: {str(e)}'
                })
    
    return results

def perform_pe_analysis(file_path):
    """
    Analyze PE file structure and characteristics.
    """
    try:
        pe = pefile.PE(file_path)
        results = {
            'machine_type': hex(pe.FILE_HEADER.Machine),
            'timestamp': datetime.fromtimestamp(pe.FILE_HEADER.TimeDateStamp).isoformat(),
            'characteristics': hex(pe.FILE_HEADER.Characteristics),
            'subsystem': pe.OPTIONAL_HEADER.Subsystem,
            'dll_characteristics': hex(pe.OPTIONAL_HEADER.DllCharacteristics),
            'sections': [],
            'imports': [],
            'exports': []
        }
        
        # Section information
        for section in pe.sections:
            results['sections'].append({
                'name': section.Name.decode().rstrip('\x00'),
                'virtual_address': hex(section.VirtualAddress),
                'virtual_size': hex(section.Misc_VirtualSize),
                'raw_size': hex(section.SizeOfRawData),
                'characteristics': hex(section.Characteristics)
            })
        
        # Import information
        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                imports = []
                for imp in entry.imports:
                    if imp.name:
                        imports.append(imp.name.decode())
                results['imports'].append({
                    'dll': entry.dll.decode(),
                    'imports': imports
                })
        
        # Export information
        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                if exp.name:
                    results['exports'].append({
                        'name': exp.name.decode(),
                        'address': hex(pe.OPTIONAL_HEADER.ImageBase + exp.address)
                    })
        
        pe.close()
        return results
        
    except Exception as e:
        return {'error': str(e)}

def is_pe_file(file_path):
    """
    Check if the file is a PE file.
    """
    try:
        with open(file_path, 'rb') as f:
            return f.read(2) == b'MZ'
    except:
        return False
