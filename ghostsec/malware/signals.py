from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from .models import MalwareSample, AnalysisReport
import hashlib
import json

@receiver(pre_save, sender=MalwareSample)
def handle_malware_upload(sender, instance, **kwargs):
    """Handle malware sample upload and initial processing"""
    if not instance.pk:  # New instance
        # Generate file hash if not provided
        if not instance.file_hash:
            with instance.file.open() as f:
                bytes = f.read()
                instance.file_hash = hashlib.sha256(bytes).hexdigest()
        
        # Initialize analysis fields
        instance.analysis_results = {
            'status': 'pending',
            'stages': {
                'static': {'status': 'pending'},
                'dynamic': {'status': 'pending'},
                'network': {'status': 'pending'},
                'memory': {'status': 'pending'}
            }
        }

@receiver(post_save, sender=MalwareSample)
def trigger_analysis(sender, instance, created, **kwargs):
    """Trigger analysis pipeline when a new sample is uploaded"""
    if created:
        from .tasks import start_analysis_pipeline
        start_analysis_pipeline.delay(instance.id)

@receiver(post_save, sender=AnalysisReport)
def update_sample_status(sender, instance, created, **kwargs):
    """Update malware sample status when analysis report is created"""
    if created:
        sample = instance.sample
        sample.status = 'completed'
        sample.save()
