from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.urls import reverse

User = get_user_model()

class MalwareEnvironment(models.Model):
    ISOLATION_LEVEL_CHOICES = [
        ('basic', 'Basic Isolation'),
        ('advanced', 'Advanced Isolation'),
        ('complete', 'Complete Isolation'),
    ]
    
    ANALYSIS_TYPE_CHOICES = [
        ('static', 'Static Analysis'),
        ('dynamic', 'Dynamic Analysis'),
        ('memory', 'Memory Analysis'),
        ('network', 'Network Analysis'),
        ('hybrid', 'Hybrid Analysis'),
    ]
    
    PLATFORM_CHOICES = [
        ('windows', 'Windows'),
        ('linux', 'Linux'),
        ('macos', 'macOS'),
        ('android', 'Android'),
        ('ios', 'iOS'),
    ]

    name = models.CharField(max_length=200)
    description = models.TextField()
    isolation_level = models.CharField(max_length=20, choices=ISOLATION_LEVEL_CHOICES)
    analysis_type = models.CharField(max_length=20, choices=ANALYSIS_TYPE_CHOICES)
    platform = models.CharField(max_length=20, choices=PLATFORM_CHOICES)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    tools = models.JSONField(help_text='List of analysis tools available')
    network_simulation = models.BooleanField(default=True)
    memory_dump_enabled = models.BooleanField(default=True)
    api_monitoring = models.BooleanField(default=True)
    sandbox_features = models.JSONField(help_text='Sandbox security features')
    max_analysis_time = models.IntegerField(help_text='Maximum analysis time in minutes')
    custom_rules = models.JSONField(null=True, blank=True)
    
    def __str__(self):
        return self.name

class MalwareSample(models.Model):
    MALWARE_TYPE_CHOICES = [
        ('ransomware', 'Ransomware'),
        ('trojan', 'Trojan'),
        ('worm', 'Worm'),
        ('virus', 'Virus'),
        ('rootkit', 'Rootkit'),
        ('botnet', 'Botnet'),
        ('spyware', 'Spyware'),
        ('cryptominer', 'Cryptominer'),
        ('other', 'Other'),
    ]
    
    STATUS_CHOICES = [
        ('pending', 'Pending Analysis'),
        ('analyzing', 'Analyzing'),
        ('completed', 'Analysis Completed'),
        ('failed', 'Analysis Failed'),
    ]

    name = models.CharField(max_length=200)
    file_hash = models.CharField(max_length=64, unique=True)
    malware_type = models.CharField(max_length=20, choices=MALWARE_TYPE_CHOICES)
    uploaded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    environment = models.ForeignKey(MalwareEnvironment, on_delete=models.CASCADE)
    analysis_results = models.JSONField(null=True, blank=True)
    static_analysis = models.JSONField(null=True, blank=True)
    dynamic_analysis = models.JSONField(null=True, blank=True)
    network_analysis = models.JSONField(null=True, blank=True)
    memory_analysis = models.JSONField(null=True, blank=True)
    ioc_extracted = models.JSONField(null=True, blank=True)
    yara_matches = models.JSONField(null=True, blank=True)
    tags = models.JSONField(null=True, blank=True)
    
    class Meta:
        permissions = [
            ('can_analyze_malware', 'Can analyze malware samples'),
            ('can_view_analysis', 'Can view analysis results'),
        ]
    
    def __str__(self):
        return f"{self.name} ({self.file_hash})"

class AnalysisReport(models.Model):
    REPORT_TYPE_CHOICES = [
        ('quick', 'Quick Analysis'),
        ('detailed', 'Detailed Analysis'),
        ('comprehensive', 'Comprehensive Analysis'),
    ]

    sample = models.ForeignKey(MalwareSample, on_delete=models.CASCADE)
    analyst = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    report_type = models.CharField(max_length=20, choices=REPORT_TYPE_CHOICES)
    executive_summary = models.TextField()
    technical_details = models.JSONField()
    ioc_list = models.JSONField()
    mitigation_steps = models.JSONField()
    attack_vectors = models.JSONField()
    malware_family = models.CharField(max_length=200, null=True, blank=True)
    threat_level = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    confidence_score = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    
    def __str__(self):
        return f"Analysis Report - {self.sample.name}"

class YaraRule(models.Model):
    name = models.CharField(max_length=200)
    description = models.TextField()
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    rule_content = models.TextField()
    is_active = models.BooleanField(default=True)
    matches = models.ManyToManyField(MalwareSample, related_name='matching_rules')
    tags = models.JSONField(null=True, blank=True)
    
    def __str__(self):
        return self.name
