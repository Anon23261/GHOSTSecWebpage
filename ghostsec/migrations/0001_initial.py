# Generated by Django 4.2.7 on 2024-11-15 05:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CTFChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("flag", models.CharField(max_length=200)),
                ("points", models.IntegerField()),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("web", "Web Security"),
                            ("crypto", "Cryptography"),
                            ("forensics", "Digital Forensics"),
                            ("pwn", "Binary Exploitation"),
                            ("reverse", "Reverse Engineering"),
                            ("misc", "Miscellaneous"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LearningModule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("order", models.IntegerField()),
                (
                    "prerequisites",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MarketplaceItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("price", models.FloatField()),
                ("category", models.CharField(max_length=50)),
                (
                    "image_file",
                    models.ImageField(
                        default="default_item.jpg", upload_to="marketplace"
                    ),
                ),
                (
                    "date_posted",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("stock", models.IntegerField(default=1)),
                ("is_digital", models.BooleanField(default=True)),
                ("is_approved", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("rating", models.FloatField(default=0.0)),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="marketplace_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NewsArticle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("summary", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "date_posted",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("category", models.CharField(max_length=50)),
                (
                    "image_file",
                    models.ImageField(default="default_news.jpg", upload_to="news"),
                ),
                ("views", models.IntegerField(default=0)),
                ("likes", models.IntegerField(default=0)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_approved", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NewsTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("location", models.CharField(blank=True, max_length=30)),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("website", models.URLField(blank=True)),
                ("github", models.URLField(blank=True)),
                ("twitter", models.URLField(blank=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", models.CharField(blank=True, max_length=32)),
                (
                    "image_file",
                    models.ImageField(default="default.jpg", upload_to="profile_pics"),
                ),
                ("account_type", models.CharField(default="user", max_length=20)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "github_id",
                    models.CharField(
                        blank=True, max_length=120, null=True, unique=True
                    ),
                ),
                (
                    "google_id",
                    models.CharField(
                        blank=True, max_length=120, null=True, unique=True
                    ),
                ),
                ("birthday", models.DateField(blank=True, null=True)),
                ("country", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("linkedin", models.CharField(blank=True, max_length=100, null=True)),
                ("reputation_points", models.IntegerField(default=0)),
                ("ctf_points", models.IntegerField(default=0)),
                ("python_points", models.IntegerField(default=0)),
                ("kali_points", models.IntegerField(default=0)),
                ("malware_points", models.IntegerField(default=0)),
                ("pentest_points", models.IntegerField(default=0)),
                ("cpp_points", models.IntegerField(default=0)),
                ("total_achievements", models.IntegerField(default=0)),
                ("skill_level", models.CharField(default="Beginner", max_length=20)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="ghostsec_user_set",
                        related_query_name="ghostsec_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="ghostsec_user_set",
                        related_query_name="ghostsec_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PythonExercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("difficulty", models.CharField(max_length=20)),
                ("category", models.CharField(max_length=50)),
                ("starter_code", models.TextField(blank=True, null=True)),
                ("solution", models.TextField()),
                ("test_cases", models.TextField()),
                ("points", models.IntegerField(default=10)),
                ("hints", models.TextField(blank=True, null=True)),
                ("order", models.IntegerField(blank=True, null=True)),
                (
                    "completed_by",
                    models.ManyToManyField(
                        related_name="completed_exercises", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PenTestLab",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=50)),
                ("difficulty", models.CharField(max_length=20)),
                ("target_setup", models.TextField()),
                ("tools_required", models.TextField(blank=True, null=True)),
                ("methodology", models.TextField()),
                ("objectives", models.TextField()),
                ("points", models.IntegerField(default=40)),
                ("estimated_time", models.IntegerField(blank=True, null=True)),
                ("prerequisites", models.TextField(blank=True, null=True)),
                (
                    "completed_by",
                    models.ManyToManyField(
                        related_name="completed_pentest_labs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_ordered",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("quantity", models.IntegerField(default=1)),
                ("total_price", models.FloatField()),
                ("status", models.CharField(default="pending", max_length=20)),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="ghostsec.marketplaceitem",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NewsComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                (
                    "date_posted",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="ghostsec.newsarticle",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="news_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="ghostsec.newscomment",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="newsarticle",
            name="tags",
            field=models.ManyToManyField(
                related_name="articles", to="ghostsec.newstag"
            ),
        ),
        migrations.CreateModel(
            name="MalwareAnalysisLab",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=50)),
                ("difficulty", models.CharField(max_length=20)),
                ("malware_type", models.CharField(max_length=50)),
                ("tools_required", models.TextField(blank=True, null=True)),
                ("environment_setup", models.TextField()),
                ("analysis_steps", models.TextField()),
                ("safety_precautions", models.TextField()),
                ("points", models.IntegerField(default=30)),
                ("estimated_time", models.IntegerField(blank=True, null=True)),
                ("prerequisites", models.TextField(blank=True, null=True)),
                (
                    "completed_by",
                    models.ManyToManyField(
                        related_name="completed_malware_labs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LearningProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                ("progress_percent", models.FloatField(default=0.0)),
                (
                    "last_accessed",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress",
                        to="ghostsec.learningmodule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KaliLab",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("difficulty", models.CharField(max_length=20)),
                ("category", models.CharField(max_length=50)),
                ("tools_required", models.TextField(blank=True, null=True)),
                ("instructions", models.TextField()),
                ("solution_guide", models.TextField(blank=True, null=True)),
                ("points", models.IntegerField(default=20)),
                ("estimated_time", models.IntegerField(blank=True, null=True)),
                ("prerequisites", models.TextField(blank=True, null=True)),
                (
                    "completed_by",
                    models.ManyToManyField(
                        related_name="completed_labs", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ItemReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.IntegerField()),
                ("review", models.TextField()),
                (
                    "date_posted",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="ghostsec.marketplaceitem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ForumPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("general", "General Discussion"),
                            ("help", "Help & Support"),
                            ("news", "News & Announcements"),
                            ("ctf", "CTF Discussion"),
                            ("tools", "Tools & Resources"),
                            ("tutorials", "Tutorials"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("views", models.IntegerField(default=0)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "likes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="liked_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ForumComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "likes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="liked_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="ghostsec.forumpost",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="CTFHint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("cost", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hints",
                        to="ghostsec.ctfchallenge",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CPPExercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=50)),
                ("difficulty", models.CharField(max_length=20)),
                ("language", models.CharField(max_length=10)),
                ("starter_code", models.TextField(blank=True, null=True)),
                ("solution", models.TextField()),
                ("test_cases", models.TextField()),
                ("memory_constraints", models.TextField(blank=True, null=True)),
                ("security_focus", models.TextField(blank=True, null=True)),
                ("points", models.IntegerField(default=25)),
                ("hints", models.TextField(blank=True, null=True)),
                ("order", models.IntegerField(blank=True, null=True)),
                (
                    "completed_by",
                    models.ManyToManyField(
                        related_name="completed_cpp_exercises",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("category", models.CharField(max_length=50)),
                (
                    "icon",
                    models.ImageField(
                        default="default_achievement.png", upload_to="achievements"
                    ),
                ),
                ("points", models.IntegerField(default=10)),
                ("criteria", models.TextField()),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="achievements", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CTFScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("solved_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("points_earned", models.IntegerField()),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ghostsec.ctfchallenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "challenge")},
            },
        ),
    ]
