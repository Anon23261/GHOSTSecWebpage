# Generated by Django 4.2.7 on 2024-11-15 01:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Environment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("web", "Web Application Security"),
                            ("network", "Network Security"),
                            ("malware", "Malware Analysis"),
                            ("forensics", "Digital Forensics"),
                            ("cloud", "Cloud Security"),
                            ("bugbounty", "Bug Bounty"),
                            ("pentest", "Penetration Testing"),
                            ("reverse", "Reverse Engineering"),
                            ("programming", "Programming"),
                            ("linux", "Linux Security"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("python", "Python"),
                            ("cpp", "C++"),
                            ("c", "C"),
                            ("csharp", "C#"),
                            ("javascript", "JavaScript"),
                            ("java", "Java"),
                            ("assembly", "Assembly"),
                            ("bash", "Bash/Shell"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("in_use", "In Use"),
                            ("maintenance", "Maintenance"),
                            ("offline", "Offline"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("max_time", models.IntegerField(help_text="Maximum time in minutes")),
                ("max_instances", models.IntegerField(default=1)),
                ("current_instances", models.IntegerField(default=0)),
                ("is_sandbox", models.BooleanField(default=False)),
                ("sandbox_config", models.JSONField(blank=True, null=True)),
                (
                    "memory_limit",
                    models.IntegerField(default=512, help_text="Memory limit in MB"),
                ),
                (
                    "cpu_limit",
                    models.IntegerField(
                        default=50, help_text="CPU limit in percentage"
                    ),
                ),
                (
                    "disk_limit",
                    models.IntegerField(
                        default=1024, help_text="Disk space limit in MB"
                    ),
                ),
                ("network_enabled", models.BooleanField(default=True)),
                (
                    "custom_tools",
                    models.JSONField(
                        blank=True,
                        help_text="List of custom tools available in the environment",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnvironmentInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("starting", "Starting"),
                            ("running", "Running"),
                            ("stopping", "Stopping"),
                            ("stopped", "Stopped"),
                            ("error", "Error"),
                        ],
                        default="starting",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                (
                    "resource_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "current_memory",
                    models.IntegerField(
                        help_text="Current memory usage in MB", null=True
                    ),
                ),
                (
                    "current_cpu",
                    models.IntegerField(
                        help_text="Current CPU usage in percentage", null=True
                    ),
                ),
                (
                    "current_disk",
                    models.IntegerField(
                        help_text="Current disk usage in MB", null=True
                    ),
                ),
                ("logs", models.TextField(blank=True)),
                (
                    "environment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instances",
                        to="learning_environments.environment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("bugbounty", "Bug Bounty"),
                            ("pentest", "Penetration Testing"),
                            ("code_review", "Code Review"),
                            ("exploit_dev", "Exploit Development"),
                            ("reverse_eng", "Reverse Engineering"),
                            ("forensics", "Digital Forensics"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        max_length=20,
                    ),
                ),
                ("points", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("flag", models.CharField(max_length=200)),
                ("hints", models.JSONField(blank=True, null=True)),
                (
                    "environment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenges",
                        to="learning_environments.environment",
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True, to="learning_environments.challenge"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("flag", models.CharField(max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("correct", "Correct"),
                            ("incorrect", "Incorrect"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("attempts", models.IntegerField(default=1)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="learning_environments.challenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("challenge", "user", "flag")},
            },
        ),
        migrations.CreateModel(
            name="EnvironmentAccess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                (
                    "environment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="learning_environments.environment",
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="access_granted",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="access_revoked",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("environment", "user")},
            },
        ),
    ]
