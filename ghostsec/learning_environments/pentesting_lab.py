import docker
import logging
import os
from pathlib import Path
from typing import Dict, List, Optional
import subprocess
import yaml

logger = logging.getLogger(__name__)

class PentestingLab:
    """
    Penetration testing environment with Kali Linux
    Includes common tools and vulnerable targets
    """
    
    def __init__(self, workspace_name: str):
        self.workspace_name = workspace_name
        self.docker_client = docker.from_env()
        self.containers = {}
        self.workspace_path = Path(f"workspaces/pentesting/{workspace_name}")
        self.network = None
        
    def setup_environment(self) -> bool:
        """Set up penetration testing environment"""
        try:
            # Create workspace directories
            os.makedirs(self.workspace_path / "reports", exist_ok=True)
            os.makedirs(self.workspace_path / "tools", exist_ok=True)
            os.makedirs(self.workspace_path / "exploits", exist_ok=True)
            os.makedirs(self.workspace_path / "payloads", exist_ok=True)
            
            # Create isolated network
            self.network = self.docker_client.networks.create(
                f"pentest_network_{self.workspace_name}",
                driver="bridge",
                internal=True
            )
            
            # Start Kali Linux container
            self.containers['kali'] = self.docker_client.containers.run(
                "kalilinux/kali-rolling",
                detach=True,
                volumes={
                    str(self.workspace_path.absolute()): {
                        'bind': '/workspace',
                        'mode': 'rw'
                    }
                },
                network=self.network.name,
                cap_add=["NET_ADMIN", "SYS_ADMIN"],
                security_opt=["seccomp=unconfined"],
                command="/bin/bash",
                tty=True
            )
            
            # Install essential tools
            self._install_tools()
            
            # Start vulnerable targets
            self._start_targets()
            
            return True
        except Exception as e:
            logger.error(f"Failed to setup pentesting lab: {e}")
            return False
            
    def _install_tools(self):
        """Install common pentesting tools"""
        tools = [
            # Reconnaissance
            "nmap", "masscan", "netcat-traditional", "whois",
            # Web
            "burpsuite", "nikto", "sqlmap", "dirb",
            # Network
            "wireshark", "tcpdump", "netcat-traditional",
            # Exploitation
            "metasploit-framework", "exploitdb", "hydra",
            # Wireless
            "aircrack-ng", "reaver", "wifite",
            # Password
            "john", "hashcat", "crunch",
            # Forensics
            "autopsy", "binwalk", "foremost",
            # Reverse Engineering
            "gdb", "radare2", "ghidra"
        ]
        
        self.containers['kali'].exec_run(
            f"apt-get update && apt-get install -y {' '.join(tools)}"
        )
        
    def _start_targets(self):
        """Start vulnerable target systems"""
        targets = {
            'metasploitable': 'tleemcjr/metasploitable2',
            'dvwa': 'vulnerables/web-dvwa',
            'webgoat': 'webgoat/webgoat-8.0',
            'vulnhub': 'vulnerables/vulnhub-ctf'
        }
        
        for name, image in targets.items():
            try:
                self.containers[name] = self.docker_client.containers.run(
                    image,
                    detach=True,
                    network=self.network.name,
                    name=f"target_{name}"
                )
            except Exception as e:
                logger.error(f"Failed to start {name}: {e}")
                
    def run_nmap_scan(self, target: str, scan_type: str = "basic") -> Dict:
        """Run Nmap scan"""
        scan_types = {
            "basic": "-sV -sC",
            "full": "-sV -sC -p-",
            "stealth": "-sS -sV",
            "udp": "-sU",
            "comprehensive": "-sV -sC -sS -sU -p- -A"
        }
        
        try:
            cmd = f"nmap {scan_types.get(scan_type, '-sV -sC')} {target} -oA /workspace/reports/nmap_{target}"
            result = self.containers['kali'].exec_run(cmd)
            return {'output': result.output.decode()}
        except Exception as e:
            logger.error(f"Nmap scan failed: {e}")
            return {'error': str(e)}
            
    def run_metasploit(self, target: str, exploit: str) -> Dict:
        """Run Metasploit exploit"""
        try:
            # Create resource script
            resource_script = f"""
            use {exploit}
            set RHOSTS {target}
            exploit
            """
            
            # Write resource script
            script_path = self.workspace_path / "exploits" / "msfconsole.rc"
            with open(script_path, 'w') as f:
                f.write(resource_script)
            
            # Run Metasploit
            cmd = f"msfconsole -r /workspace/exploits/msfconsole.rc"
            result = self.containers['kali'].exec_run(cmd)
            return {'output': result.output.decode()}
        except Exception as e:
            logger.error(f"Metasploit execution failed: {e}")
            return {'error': str(e)}
            
    def crack_password(self, hash_file: str, wordlist: str = "/usr/share/wordlists/rockyou.txt") -> Dict:
        """Crack password hashes"""
        try:
            # Identify hash type
            cmd = f"hashid -m {hash_file}"
            hash_type = self.containers['kali'].exec_run(cmd)
            
            # Run John the Ripper
            cmd = f"john --wordlist={wordlist} {hash_file}"
            result = self.containers['kali'].exec_run(cmd)
            return {
                'hash_type': hash_type.output.decode(),
                'cracking_result': result.output.decode()
            }
        except Exception as e:
            logger.error(f"Password cracking failed: {e}")
            return {'error': str(e)}
            
    def analyze_pcap(self, pcap_file: str) -> Dict:
        """Analyze packet capture file"""
        try:
            # Basic analysis with tshark
            cmd = f"tshark -r {pcap_file} -q -z io,phs -z expert"
            result = self.containers['kali'].exec_run(cmd)
            
            # Extract interesting data
            cmd = f"tshark -r {pcap_file} -Y 'http || ftp || smtp || pop || imap' -T fields -e frame.time -e ip.src -e ip.dst -e tcp.port"
            interesting = self.containers['kali'].exec_run(cmd)
            
            return {
                'analysis': result.output.decode(),
                'interesting_traffic': interesting.output.decode()
            }
        except Exception as e:
            logger.error(f"PCAP analysis failed: {e}")
            return {'error': str(e)}
            
    def run_web_scan(self, target: str) -> Dict:
        """Run web application security scan"""
        results = {}
        try:
            # Nikto scan
            cmd = f"nikto -h {target} -o /workspace/reports/nikto_{target}.txt"
            results['nikto'] = self.containers['kali'].exec_run(cmd).output.decode()
            
            # Directory enumeration
            cmd = f"dirb {target} -o /workspace/reports/dirb_{target}.txt"
            results['dirb'] = self.containers['kali'].exec_run(cmd).output.decode()
            
            # SQLMap scan
            cmd = f"sqlmap -u {target} --batch --random-agent"
            results['sqlmap'] = self.containers['kali'].exec_run(cmd).output.decode()
            
        except Exception as e:
            logger.error(f"Web scan failed: {e}")
            results['error'] = str(e)
            
        return results
        
    def cleanup(self):
        """Clean up pentesting environment"""
        try:
            for container in self.containers.values():
                container.stop()
                container.remove()
            if self.network:
                self.network.remove()
        except Exception as e:
            logger.error(f"Cleanup failed: {e}")


class PentestChallenge:
    """
    Structured penetration testing challenges
    """
    
    def __init__(self, name: str, difficulty: str):
        self.name = name
        self.difficulty = difficulty
        self.completed = False
        self.points = self._calculate_points()
        
    def _calculate_points(self) -> int:
        """Calculate points based on difficulty"""
        points_map = {
            'beginner': 100,
            'intermediate': 250,
            'advanced': 500,
            'expert': 1000
        }
        return points_map.get(self.difficulty.lower(), 100)
        
    def start(self) -> Dict:
        """Start the challenge"""
        return {
            'name': self.name,
            'difficulty': self.difficulty,
            'points': self.points,
            'objectives': self._get_objectives()
        }
        
    def _get_objectives(self) -> List[str]:
        """Get challenge objectives"""
        return [
            "Reconnaissance",
            "Scanning",
            "Vulnerability Assessment",
            "Exploitation",
            "Post Exploitation",
            "Documentation"
        ]
        
    def submit_solution(self, solution: Dict) -> bool:
        """Submit and verify challenge solution"""
        # Verify solution
        # Update completion status
        # Award points
        return True
