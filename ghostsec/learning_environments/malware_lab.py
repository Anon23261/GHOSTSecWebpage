import os
import logging
from typing import Dict, List, Optional
import docker
from pathlib import Path
import yara
import pefile
import magic
import ssdeep

logger = logging.getLogger(__name__)

class MalwareLab:
    """
    Secure environment for malware analysis and research
    Features multiple analysis tools and isolation mechanisms
    """
    
    def __init__(self, workspace_name: str):
        self.workspace_name = workspace_name
        self.docker_client = docker.from_env()
        self.container = None
        self.workspace_path = Path(f"workspaces/malware/{workspace_name}")
        self.yara_rules = []
        
    def setup_environment(self) -> bool:
        """Set up isolated analysis environment"""
        try:
            # Create workspace directories
            os.makedirs(self.workspace_path / "samples", exist_ok=True)
            os.makedirs(self.workspace_path / "reports", exist_ok=True)
            
            # Start analysis container
            self.container = self.docker_client.containers.run(
                "remnux/remnux-distro:focal",
                detach=True,
                volumes={
                    str(self.workspace_path.absolute()): {
                        'bind': '/workspace',
                        'mode': 'rw'
                    }
                },
                network_mode="none",  # Complete network isolation
                cap_add=["SYS_PTRACE"],  # Required for debugging
                security_opt=["seccomp=unconfined"]
            )
            
            return True
        except Exception as e:
            logger.error(f"Failed to setup malware lab: {e}")
            return False
            
    def load_yara_rules(self, rules_dir: str) -> bool:
        """Load YARA rules for malware detection"""
        try:
            rules_path = Path(rules_dir)
            for rule_file in rules_path.glob("*.yar"):
                self.yara_rules.append(yara.compile(str(rule_file)))
            return True
        except Exception as e:
            logger.error(f"Failed to load YARA rules: {e}")
            return False
            
    def analyze_file(self, file_path: str) -> Dict:
        """Perform comprehensive malware analysis"""
        results = {
            'static_analysis': {},
            'dynamic_analysis': {},
            'yara_matches': [],
            'network_activity': [],
            'file_info': {}
        }
        
        try:
            # Basic file info
            file_path = Path(file_path)
            results['file_info'] = {
                'name': file_path.name,
                'size': file_path.stat().st_size,
                'type': magic.from_file(str(file_path)),
                'mime': magic.from_file(str(file_path), mime=True)
            }
            
            # Static analysis for PE files
            if results['file_info']['mime'] == 'application/x-dosexec':
                results['static_analysis'] = self._analyze_pe(file_path)
            
            # YARA scanning
            for rule in self.yara_rules:
                matches = rule.match(str(file_path))
                if matches:
                    results['yara_matches'].extend(str(match) for match in matches)
            
            # Fuzzy hash
            results['file_info']['ssdeep'] = ssdeep.hash_from_file(str(file_path))
            
            # Dynamic analysis in container
            if self.container:
                results['dynamic_analysis'] = self._dynamic_analysis(file_path)
            
        except Exception as e:
            logger.error(f"Analysis failed: {e}")
            
        return results
        
    def _analyze_pe(self, file_path: Path) -> Dict:
        """Analyze PE file structure"""
        pe_info = {}
        try:
            pe = pefile.PE(str(file_path))
            
            # Get sections
            pe_info['sections'] = [{
                'name': section.Name.decode().rstrip('\x00'),
                'size': section.SizeOfRawData,
                'entropy': section.get_entropy()
            } for section in pe.sections]
            
            # Get imports
            pe_info['imports'] = {}
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                pe_info['imports'][entry.dll.decode()] = [
                    imp.name.decode() if imp.name else str(imp.ordinal)
                    for imp in entry.imports
                ]
            
            # Check for packers
            pe_info['possible_packer'] = any(
                section.get_entropy() > 7.0 for section in pe.sections
            )
            
            pe.close()
            
        except Exception as e:
            logger.error(f"PE analysis failed: {e}")
            
        return pe_info
        
    def _dynamic_analysis(self, file_path: Path) -> Dict:
        """Perform dynamic analysis in container"""
        analysis = {
            'behavior': [],
            'network_attempts': [],
            'file_operations': []
        }
        
        try:
            # Copy file to container
            self.container.exec_run(f"mkdir -p /workspace/analysis")
            with open(file_path, 'rb') as f:
                self.container.put_archive("/workspace/analysis", f.read())
            
            # Run with strace
            cmd = f"strace -f -e trace=process,network,file /workspace/analysis/{file_path.name}"
            result = self.container.exec_run(cmd)
            
            # Parse strace output
            for line in result.output.decode().split('\n'):
                if 'connect(' in line or 'bind(' in line:
                    analysis['network_attempts'].append(line)
                elif 'execve(' in line:
                    analysis['behavior'].append(line)
                elif 'open(' in line or 'write(' in line:
                    analysis['file_operations'].append(line)
                    
        except Exception as e:
            logger.error(f"Dynamic analysis failed: {e}")
            
        return analysis
        
    def cleanup(self):
        """Clean up lab environment"""
        try:
            if self.container:
                self.container.stop()
                self.container.remove()
            # Keep workspace files for further analysis
        except Exception as e:
            logger.error(f"Cleanup failed: {e}")


class AutomatedAnalysis:
    """
    Automated malware analysis pipeline
    """
    
    def __init__(self):
        self.labs = {}
        
    def create_lab(self, name: str) -> Optional[MalwareLab]:
        """Create new analysis lab"""
        try:
            lab = MalwareLab(name)
            if lab.setup_environment():
                self.labs[name] = lab
                return lab
        except Exception as e:
            logger.error(f"Failed to create lab: {e}")
        return None
        
    def analyze_sample(self, lab_name: str, sample_path: str) -> Dict:
        """Run sample through analysis pipeline"""
        if lab_name not in self.labs:
            return {}
            
        lab = self.labs[lab_name]
        return lab.analyze_file(sample_path)
        
    def cleanup_all(self):
        """Clean up all labs"""
        for lab in self.labs.values():
            lab.cleanup()
